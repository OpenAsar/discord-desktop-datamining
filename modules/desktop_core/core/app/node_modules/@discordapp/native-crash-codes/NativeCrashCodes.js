"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getExceptionCode = getExceptionCode;
exports.getExceptionDescription = getExceptionDescription;
const exceptionTypes = {
  C0000005: 'EXCEPTION_ACCESS_VIOLATION',
  '80000002': 'EXCEPTION_DATATYPE_MISALIGNMENT',
  '80000003': 'EXCEPTION_BREAKPOINT',
  '80000004': 'EXCEPTION_SINGLE_STEP',
  C000008C: 'EXCEPTION_ARRAY_BOUNDS_EXCEEDED',
  C000008D: 'EXCEPTION_FLT_DENORMAL_OPERAND',
  C000008E: 'EXCEPTION_FLT_DIVIDE_BY_ZERO',
  C000008F: 'EXCEPTION_FLT_INEXACT_RESULT',
  C0000090: 'EXCEPTION_FLT_INVALID_OPERATION',
  C0000091: 'EXCEPTION_FLT_OVERFLOW',
  C0000092: 'EXCEPTION_FLT_STACK_CHECK',
  C0000093: 'EXCEPTION_FLT_UNDERFLOW',
  C0000094: 'EXCEPTION_INT_DIVIDE_BY_ZERO',
  C0000095: 'EXCEPTION_INT_OVERFLOW',
  C0000096: 'EXCEPTION_PRIV_INSTRUCTION',
  C0000006: 'EXCEPTION_IN_PAGE_ERROR',
  C000001D: 'EXCEPTION_ILLEGAL_INSTRUCTION',
  C0000025: 'EXCEPTION_NONCONTINUABLE_EXCEPTION',
  C00000FD: 'EXCEPTION_STACK_OVERFLOW',
  C0000026: 'EXCEPTION_INVALID_DISPOSITION',
  '80000001': 'EXCEPTION_GUARD_PAGE',
  C0000008: 'EXCEPTION_INVALID_HANDLE'
};
function hexify(code) {
  return BigInt.asUintN(32, BigInt(code)).toString(16).toUpperCase();
}
function getExceptionDescription(code) {
  try {
    if (code >= 0) {
      return code.toString();
    }
    const hexCode = hexify(code);
    const exceptionType = exceptionTypes[hexCode] ?? 'Unknown';
    return `${hexCode} (${exceptionType})`;
  } catch (e) {
    console.log(`Unable to parse exit code ${e === null || e === void 0 ? void 0 : e.message}\n${e === null || e === void 0 ? void 0 : e.stack}`);
  }
  return code.toString();
}
function getExceptionCode(code) {
  const hexCode = hexify(code);
  return exceptionTypes[hexCode] ?? hexCode;
}