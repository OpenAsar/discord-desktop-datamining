const tslib = require('tslib');
const node = require('@sentry/node');
const electron = require('electron');
const electronNormalize = require('./electron-normalize.js');

function enableAnrMainProcess(options) {
    if (electronNormalize.ELECTRON_MAJOR_VERSION < 4) {
        throw new Error('Main process ANR detection is only supported on Electron v4+');
    }
    const mainOptions = Object.assign({ entryScript: electron.app.getAppPath() }, options);
    return node.enableAnrDetection(mainOptions);
}
/**
 * **Note** This feature is still in beta so there may be breaking changes in future releases.
 *
 * Starts a child process that detects Application Not Responding (ANR) errors.
 *
 * It's important to await on the returned promise before your app code to ensure this code does not run in the ANR
 * child process.
 *
 * ```js
 * import { init, enableAnrDetection } from '@sentry/electron';
 *
 * init({ dsn: "__DSN__" });
 *
 * // with ESM + Electron v28+
 * await enableAnrDetection({ mainProcess: { captureStackTrace: true }});
 * runApp();
 *
 * // with CJS
 * enableAnrDetection({ mainProcess: { captureStackTrace: true }}).then(() => {
 *   runApp();
 * });
 * ```
 */
function enableAnrDetection(options = {}) {
    return tslib.__awaiter(this, void 0, void 0, function* () {
        if (options.mainProcess !== false) {
            return enableAnrMainProcess(options.mainProcess || {});
        }
        return Promise.resolve();
    });
}

exports.enableAnrDetection = enableAnrDetection;
//# sourceMappingURL=anr.js.map
